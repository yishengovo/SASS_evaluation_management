// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...all]': RouteRecordInfo<'/[...all]', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '/app': RouteRecordInfo<'/app', '/app', Record<never, never>, Record<never, never>>,
    '/auth': RouteRecordInfo<'/auth', '/auth', Record<never, never>, Record<never, never>>,
    '/auth/allOrder': RouteRecordInfo<'/auth/allOrder', '/auth/allOrder', Record<never, never>, Record<never, never>>,
    '/auth/login': RouteRecordInfo<'/auth/login', '/auth/login', Record<never, never>, Record<never, never>>,
    '/auth/login2': RouteRecordInfo<'/auth/login2', '/auth/login2', Record<never, never>, Record<never, never>>,
    '/auth/recharge': RouteRecordInfo<'/auth/recharge', '/auth/recharge', Record<never, never>, Record<never, never>>,
    '/auth/signup': RouteRecordInfo<'/auth/signup', '/auth/signup', Record<never, never>, Record<never, never>>,
    '/blog': RouteRecordInfo<'/blog', '/blog', Record<never, never>, Record<never, never>>,
    '/blog/': RouteRecordInfo<'/blog/', '/blog/', Record<never, never>, Record<never, never>>,
    '/blog/[slug]': RouteRecordInfo<'/blog/[slug]', '/blog/:slug', { slug: ParamValue<true> }, { slug: ParamValue<false> }>,
    '/contacts': RouteRecordInfo<'/contacts', '/contacts', Record<never, never>, Record<never, never>>,
    '/contacts/': RouteRecordInfo<'/contacts/', '/contacts/', Record<never, never>, Record<never, never>>,
    '/contacts/all-contacts': RouteRecordInfo<'/contacts/all-contacts', '/contacts/all-contacts', Record<never, never>, Record<never, never>>,
    '/contacts/collection-contacts': RouteRecordInfo<'/contacts/collection-contacts', '/contacts/collection-contacts', Record<never, never>, Record<never, never>>,
    '/home': RouteRecordInfo<'/home', '/home', Record<never, never>, Record<never, never>>,
    '/home/': RouteRecordInfo<'/home/', '/home/', Record<never, never>, Record<never, never>>,
    '/home/all-project': RouteRecordInfo<'/home/all-project', '/home/all-project', Record<never, never>, Record<never, never>>,
    '/home/classify-project': RouteRecordInfo<'/home/classify-project', '/home/classify-project', Record<never, never>, Record<never, never>>,
    '/home/collection-project': RouteRecordInfo<'/home/collection-project', '/home/collection-project', Record<never, never>, Record<never, never>>,
    '/home/recycle-bin': RouteRecordInfo<'/home/recycle-bin', '/home/recycle-bin', Record<never, never>, Record<never, never>>,
    '/home/sidebar/all-project/all-project': RouteRecordInfo<'/home/sidebar/all-project/all-project', '/home/sidebar/all-project/all-project', Record<never, never>, Record<never, never>>,
    '/home/sidebar/all-project/project-code': RouteRecordInfo<'/home/sidebar/all-project/project-code', '/home/sidebar/all-project/project-code', Record<never, never>, Record<never, never>>,
    '/home/sidebar/classify-project/classify-project': RouteRecordInfo<'/home/sidebar/classify-project/classify-project', '/home/sidebar/classify-project/classify-project', Record<never, never>, Record<never, never>>,
    '/home/sidebar/collection-project/collection-project': RouteRecordInfo<'/home/sidebar/collection-project/collection-project', '/home/sidebar/collection-project/collection-project', Record<never, never>, Record<never, never>>,
    '/home/sidebar/recycle-bin/recycle-bin': RouteRecordInfo<'/home/sidebar/recycle-bin/recycle-bin', '/home/sidebar/recycle-bin/recycle-bin', Record<never, never>, Record<never, never>>,
    '/sidebar/layouts/profile-edit': RouteRecordInfo<'/sidebar/layouts/profile-edit', '/sidebar/layouts/profile-edit', Record<never, never>, Record<never, never>>,
    '/sidebar/layouts/profile-edit/': RouteRecordInfo<'/sidebar/layouts/profile-edit/', '/sidebar/layouts/profile-edit/', Record<never, never>, Record<never, never>>,
    '/sidebar/layouts/profile-edit/experience': RouteRecordInfo<'/sidebar/layouts/profile-edit/experience', '/sidebar/layouts/profile-edit/experience', Record<never, never>, Record<never, never>>,
    '/sidebar/layouts/profile-edit/settings': RouteRecordInfo<'/sidebar/layouts/profile-edit/settings', '/sidebar/layouts/profile-edit/settings', Record<never, never>, Record<never, never>>,
    '/sidebar/layouts/profile-edit/skills': RouteRecordInfo<'/sidebar/layouts/profile-edit/skills', '/sidebar/layouts/profile-edit/skills', Record<never, never>, Record<never, never>>,
    '/sidebar/layouts/profile-notifications': RouteRecordInfo<'/sidebar/layouts/profile-notifications', '/sidebar/layouts/profile-notifications', Record<never, never>, Record<never, never>>,
    '/sidebar/layouts/profile-view': RouteRecordInfo<'/sidebar/layouts/profile-view', '/sidebar/layouts/profile-view', Record<never, never>, Record<never, never>>,
    '/statics/collection': RouteRecordInfo<'/statics/collection', '/statics/collection', Record<never, never>, Record<never, never>>,
    '/statics/data-record': RouteRecordInfo<'/statics/data-record', '/statics/data-record', Record<never, never>, Record<never, never>>,
    '/statics/evaluation-report': RouteRecordInfo<'/statics/evaluation-report', '/statics/evaluation-report', Record<never, never>, Record<never, never>>,
    '/statics/statics': RouteRecordInfo<'/statics/statics', '/statics/statics', Record<never, never>, Record<never, never>>,
    '/survey/answer-preview': RouteRecordInfo<'/survey/answer-preview', '/survey/answer-preview', Record<never, never>, Record<never, never>>,
    '/survey/survey-library': RouteRecordInfo<'/survey/survey-library', '/survey/survey-library', Record<never, never>, Record<never, never>>,
    '/survey-template': RouteRecordInfo<'/survey-template', '/survey-template', Record<never, never>, Record<never, never>>,
    '/survey-template/': RouteRecordInfo<'/survey-template/', '/survey-template/', Record<never, never>, Record<never, never>>,
    '/survey-template/360survey': RouteRecordInfo<'/survey-template/360survey', '/survey-template/360survey', Record<never, never>, Record<never, never>>,
    '/survey-template/evaluation': RouteRecordInfo<'/survey-template/evaluation', '/survey-template/evaluation', Record<never, never>, Record<never, never>>,
    '/survey-template/investigation': RouteRecordInfo<'/survey-template/investigation', '/survey-template/investigation', Record<never, never>, Record<never, never>>,
    '/wizard-v1': RouteRecordInfo<'/wizard-v1', '/wizard-v1', Record<never, never>, Record<never, never>>,
    '/wizard-v1/': RouteRecordInfo<'/wizard-v1/', '/wizard-v1/', Record<never, never>, Record<never, never>>,
    '/wizard-v1/project-assessment': RouteRecordInfo<'/wizard-v1/project-assessment', '/wizard-v1/project-assessment', Record<never, never>, Record<never, never>>,
    '/wizard-v1/project-details': RouteRecordInfo<'/wizard-v1/project-details', '/wizard-v1/project-details', Record<never, never>, Record<never, never>>,
    '/wizard-v1/project-evaluation': RouteRecordInfo<'/wizard-v1/project-evaluation', '/wizard-v1/project-evaluation', Record<never, never>, Record<never, never>>,
    '/wizard-v1/project-info': RouteRecordInfo<'/wizard-v1/project-info', '/wizard-v1/project-info', Record<never, never>, Record<never, never>>,
    '/wizard-v1/project-setting': RouteRecordInfo<'/wizard-v1/project-setting', '/wizard-v1/project-setting', Record<never, never>, Record<never, never>>,
    '/wizard-v1/project-team': RouteRecordInfo<'/wizard-v1/project-team', '/wizard-v1/project-team', Record<never, never>, Record<never, never>>,
    '/wizard-v1/project-tools': RouteRecordInfo<'/wizard-v1/project-tools', '/wizard-v1/project-tools', Record<never, never>, Record<never, never>>,
    '/wizard-v1/question/question-list': RouteRecordInfo<'/wizard-v1/question/question-list', '/wizard-v1/question/question-list', Record<never, never>, Record<never, never>>,
    '/wizard-v1/success': RouteRecordInfo<'/wizard-v1/success', '/wizard-v1/success', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
